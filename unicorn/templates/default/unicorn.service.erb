#!/usr/bin/ruby

require 'digest/md5'

ROOT_PATH="<%= @deploy[:deploy_to] %>"
RAILS_ENV="<%= @deploy[:rails_env] %>"
APP_NAME="<%= @application %>"
PID_PATH="#{ROOT_PATH}/shared/pids/unicorn.pid"
OLD_PID_PATH="#{PID_PATH}.oldbin"

def run! command
  command = %Q{#{command_prefix} #{command}}
  puts command
  system(command)
end

def pid_file_exists?
  File.exists?(PID_PATH)
end

def old_pid_file_exists?
  File.exists?(OLD_PID_PATH)
end

def process_id
  File.read(PID_PATH).chomp.to_i
rescue Errno::ENOENT
  nil
end

def old_process_id
  File.read(OLD_PID_PATH).chomp.to_i
rescue Errno::ENOENT
  nil
end

def is_restarting?
  old_pid_file_exists? && process_running?(old_process_id)
end

def process_running? pid
  Process.getpgid(pid)
  true
rescue Errno::ESRCH
  false
end

def is_running?
  pid_file_exists? && process_running?(process_id)
end

def command_prefix
  environment_vars  = %Q{RAILS_ENV="#{RAILS_ENV}"}
  prefix = ""

  if File.exists?("#{ROOT_PATH}/current/Gemfile")
    puts "OpsWorks: Gemfile detected - prefixing with bundle exec"
    prefix = %Q{/usr/local/bin/bundle exec}
  else
    puts "OpsWorks: no Gemfile detected"
  end

  %Q{cd #{ROOT_PATH}/current && #{environment_vars} #{prefix}}
end

def different_gemfile?
  if File.exists?("#{ROOT_PATH}/current/Gemfile")
    dir = Dir["#{ROOT_PATH}/releases/*"]
    previous_release_path = dir.sort[dir.size-2]
    if !previous_release_path.nil? && File.exists?("#{previous_release_path}/Gemfile")
      digest = Digest::MD5.hexdigest(File.read("#{ROOT_PATH}/current/Gemfile")) != Digest::MD5.hexdigest(File.read("#{previous_release_path}/Gemfile"))
      puts "Gemfile digests match? - #{digest}"
      digest
    end
  end
  false
end

def remove_file! file
  File.delete(file) if File.exist?(file)
end

def kill_process! pid, signal='TERM'
  Process.kill(signal, pid) if pid
rescue Errno::ESRCH => e
  $stderr.puts "PID #{pid} did not exist to send signal #{signal}!"
end

def perform_if_not_restarting command
  unless is_restarting?
    send(command)
  else
    puts "Refusing to run command #{command} because Unicorn is restarting (old_pid: #{old_process_id})"
    exit 1
  end
end

#------------------------------------------------------------------------------#

def start!
  if is_running?
    restart!
  else
    run! %Q{unicorn_rails --env #{RAILS_ENV} --daemonize -c #{ROOT_PATH}/shared/config/unicorn.conf}
  end
end

def stop! force=false
  if force || is_running?
    kill_process!(process_id)
    kill_process!(old_process_id) if force

    remove_file!(PID_PATH)
    remove_file!(OLD_PID_PATH)
  else
    puts "You can't stop unicorn, because it's not running"
  end
end

def restart!
  if is_running?
    kill_process!(process_id, 'USR2')
  else
    start!
  end
end

def reload!
  if is_running?
    kill_process!(process_id, 'HUP')
  else
    puts "Unicorn is not currently running"
  end
end

def clean_restart!
  if different_gemfile?
    puts "Found a previous version with a different Gemfile: Doing a stop & start"
    stop! if is_running?
    start!
  else
    puts "No previous version with a different Gemfile found. Assuming a quick restart without re-loading gems is save"
    restart!
  end
end

def force_restart!
  force = true
  stop!(force)
  start!
end

def status!
  if is_running?
    puts "Unicorn #{APP_NAME} running with PID #{process_id}"
    true
  else
    puts "Unicorn #{APP_NAME} not running"
    false
  end
end


case ARGV[0]
when "start"
  puts "Starting Unicorn #{APP_NAME}"
  perform_if_not_restarting(:start!)
when "stop"
  puts "Stopping Unicorn #{APP_NAME}"
  perform_if_not_restarting(:stop!)
when "status"
  exit status!
when "restart"
  perform_if_not_restarting(:restart!)
when "clean-restart"
  perform_if_not_restarting(:clean_restart!)
when "force-restart"
  force_restart!
when "reload"
  perform_if_not_restarting(:reload!)
else
  puts "Usage: {start|stop|status|restart|reload|clean-restart|force-restart}"
  exit 1
end

exit 0

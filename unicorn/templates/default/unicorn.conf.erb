PID_FILE = "/mnt/srv/www/<%= @application %>/shared/pids/unicorn.pid"
OLD_PID_FILE = "/mnt/srv/www/<%= @application %>/shared/pids/unicorn.pid.oldbin"

def dprint msg
  $stderr.puts(msg)
end

def kill_existing_workers?(server)
  File.exist?(OLD_PID_FILE)
end

def process_id
  File.read(PID_FILE).chomp.to_i
rescue
  nil
end

def old_process_id
  File.read(OLD_PID_FILE).chomp.to_i
rescue
  nil
end

def am_i_the_last_new_worker?(server, worker)
  (worker.nr + 1) >= server.worker_processes
end

def kill_master!
  Process.kill(:QUIT, old_process_id)
end

def decrement_workers!
  # http://unicorn.bogomips.org/SIGNALS.html
  Process.kill(:TTOU, old_process_id)
end

#==============================================================================#

worker_processes <%= node[:unicorn][:worker_processes] %>

user "<%= @deploy[:user]%>"

working_directory "<%= @deploy[:deploy_to]%>/current"

listen "<%= @deploy[:deploy_to]%>/shared/sockets/unicorn.sock", :backlog => <%= node[:unicorn][:backlog] %>, :tcp_nodelay => <%= node[:unicorn][:tcp_nodelay] %>, :tcp_nopush => <%= node[:unicorn][:tcp_nopush] %>, :tries => <%= node[:unicorn][:tries] %>, :delay => <%= node[:unicorn][:delay] %>, :accept_filter => <%= node[:unicorn][:accept_filter].inspect %>

timeout <%= node[:unicorn][:timeout] %>

pid PID_FILE

stderr_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stderr.log"
stdout_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stdout.log"

# combine REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app <%= node[:unicorn][:preload_app] %>
GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)

# ensure Unicorn doesn't use a stale Gemfile when restarting
# more info: https://willj.net/2011/08/02/fixing-the-gemfile-not-found-bundlergemfilenotfound-error/
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= @deploy[:deploy_to]%>/current/Gemfile"
end

before_fork do |server, worker|
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  # NOTE: This is executed when a *worker* is started

  dprint("PID: #{process_id}")
  dprint("Old PID: #{old_process_id}") if old_process_id
  dprint("Number of running server workers: #{server.worker_processes}")

  dprint("New worker number: #{(worker.nr + 1)} (index #{worker.nr})")

  dprint("kill_existing_workers?: #{kill_existing_workers?(server)}")
  dprint("am_i_the_last_new_worker?: #{am_i_the_last_new_worker?(server, worker)}")

  if kill_existing_workers?(server)
    if am_i_the_last_new_worker?(server, worker)
      kill_master!
    else
      decrement_workers!
    end
  end

  # Throttle the master from forking too quickly by sleeping.
  sleep 1
end

after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  # Only perform log splitting for Rails apps
  #
  if defined?(Rails)
    # Make each worker pid write out to a separate log file
    log_path = "log/rails-#{Rails.env}.#{worker.nr}.log"
    # Rails.logger = Logger.new(log_path, File::WRONLY | File::APPEND)                # This is for Rails 3
    Rails.logger = ActiveSupport::Logger.new(log_path, File::WRONLY | File::APPEND)   # This is for Rails 4

    ActiveSupport::LogSubscriber.logger = Rails.logger
    ActionController::Base.logger = Rails.logger
    ActionMailer::Base.logger = Rails.logger

    begin
      ActiveResource::Base.logger = Rails.logger
    rescue NameError => e
      # OK, we don't use ActiveResource
      Rails.logger.info "Not setting up logger for ActiveResource::Base - #{e.inspect}"
    end
  end
end
